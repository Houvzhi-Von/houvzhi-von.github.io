<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mac环境下使用Nginx实现80端口转发8080端口]]></title>
    <url>%2Fblog%2F2018%2F08%2F10%2FMac%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8Nginx%E5%AE%9E%E7%8E%B080%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%918080%E7%AB%AF%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[由于项目本身的原因，开发必须使用80端口实现，而在Unix内核中非Root用户无法直接使用1024以下的端口，最初作者找到了pfctl的方式实现80端口转发到8080端口实现访问，经过亲测出现了最为严重的问题，按照当时的方法配置好之后发现本机Mac通过localhost/&lt;项目名&gt;和127.0.0.1/&lt;项目名&gt;可以访问，此时很是兴奋，但出现了最根本的问题，那就是同局域网内其他机器通过访问IP地址/&lt;项目名&gt;（例如：IP地址是192.168.0.106，那么其他机器访问192.168.0.106/&lt;项目名&gt;）却访问不到，本来就是为了实现同网段开发和测试并行，结果其他机器却无法访问意味着这一次的搬砖是竹篮打水。后来作者就利用Nginx进行80端口转发到Tomcat的8080端口实现访问，作者亲测果然好使，好了废话不多说了，干货走起来~~下面就是详细的配置步骤： ##环境Mac OS版本： 10.12.6Nginx版本： 1.12.1 安装作者使用Homebrew安装库 brew search nginxbrew install nginx 这样安装好之后你会发现nginx的监听端口是8080，并非80，那么此时你就需要更改Nginx的监听端口，那么这一步就很关键了，不能按照以往传统的方式去更改,读者请仔细看一下部分。由于Mac OS是自带Apache服务的，它本身占用了80端口，首先你需要将Apache的监听端口改为其他或者直接将其卸载，作者是改掉它的监听端口为8011。 ##命令行 sudo vim /etc/apache2/httpd.conf图片中红色框打开原本是80端口，作者已将其改为8011。 改动之后，将其重启 sudo /usr/sbin/apachectl restart到这里，你已经将80端口释放掉了。 其次你需要了解的就是plist文件。plist就是property list format的意思，是苹果用来保存应用数据的格式，其实就是个xml。可以在/usr/local/opt/nginx 下找到nginx对应的plist文件，比如在作者电脑上是 homebrew.mxcl.nginx.plist 。它的内容如下：&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;&lt;!DOCTYPE plist PUBLIC “-//Apple//DTD PLIST 1.0//EN” “http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt; Label homebrew.mxcl.nginx RunAtLoad KeepAlive ProgramArguments /usr/local/opt/nginx/bin/nginx -g daemon off; WorkingDirectory /usr/local 需要把这个文件复制到 /Library/LaunchDaemons 下，如果是 ~/Library/LaunchAgents 也可以，但两者有区别。前者是系统启动时启动，后者则是在用户登录时启动。 接着执行launchctl load -w，如下： sudo cp /usr/local/opt/nginx/*.plist /Library/LaunchDaemonssudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist 最后，重启你的机器，你会发现nginx在80端口启动了，试着通过http://localhost直接访问，若出现下边图片的显示则意味着你的Nginx的80端口已经配置完成，意味着你已经完成了六成的工作。 如果你Tomcat的端口是8080，此时你便要启动它，之所以在此时启动Tomcat是为了先让Tomcat占用8080端口，因为在后面配置Nginx转发时需要配置8080端口的转发，为了在那个时候不被Nginx抢先占用8080端口(这里也可以不启动Tomcat，只要你在配置好nginx转发配置后不要立刻启动nginx服务即可，因为启动它便直接占用8080端口实现转发，而这时其实你还未使用8080端口)导致Tomcat的启动的失败，因此可以先让Tomcat占用端口而后在进行Nginx对8080端口的映射转发。此时你的Tomcat已经启动好了，此时我们开始配置Nginx的转发配置： ##命令行 sudo vim /usr/local/etc/nginx/nginx.conf你只需关心server节点内的配置即可 server下的结点： listen：监听80端口server_name：转发到哪个地址proxy_pass：代理到哪个地址 这其中几项配置完毕，我们将Nginx重启（重启是需要切换到Nginx目录下的） sudo /usr/local/Cellar/nginx/1.12.1/bin/nginx -s reload 到这里所有的操作都已完毕，现在你和你同一网段下的其他伙伴就可以通过直接访问IP地址/&lt;项目名&gt; 访问你的Tomcat项目了。 #相关命令操作 ####Apache命令停止服务：sudo /usr/sbin/apachectl stop开启服务：sudo /usr/sbin/apachectl start重启服务：sudo /usr/sbin/apachectl restart ####Nginx命令(需要在Nginx的目录下执行，目录:/usr/local/Cellar/nginx/1.12.1/bin/)开启：sudo nginx重启：sudo nginx -s reload关闭首先 ，查询nginx主进程号(带有master标识的进程)：ps -ef|grep nginx正常停止 sudo kill -QUIT 主进程号快速停止 sudo kill -TERM 主进程号 ##感谢以下博客的博主http://www.cnblogs.com/kavlez/p/start-nginx-on-port-80-at-os-x.htmlhttp://blog.csdn.net/seafishyls/article/details/44546809http://www.cnblogs.com/94cool/p/3927084.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[欢迎各位]]></title>
    <url>%2Fblog%2F2018%2F08%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to FHZ‘s Blog!这里是小智的搬砖库存，当然还会有一些我个人拍摄的作品，欢迎各位在很无聊的时候闲逛~~]]></content>
  </entry>
</search>
