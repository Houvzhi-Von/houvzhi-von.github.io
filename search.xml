<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[百家湖·1912行 - By ikon D7100]]></title>
    <url>%2F2019%2F08%2F27%2F%E7%99%BE%E5%AE%B6%E6%B9%96%C2%B71912%E8%A1%8C-By-ikon-D7100%2F</url>
    <content type="text"><![CDATA[小智近日又带着 「 Nikon D7100 」 去到南京江宁区百家湖·1912街区拍摄 百家湖·1912街区 百家湖·景枫中心]]></content>
      <categories>
        <category>智镜</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[极品飞车20 - 体验]]></title>
    <url>%2F2019%2F08%2F19%2F%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A620-%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[最近小智痴迷在了《极品飞车20:复仇》游戏中，和现实中一模一样的车型，近乎真实的驾驶漂移体验，小智爱上了这款竞速类剧情游戏，完美到爆啊！！]]></content>
      <categories>
        <category>智镜</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[宁波行 - 全程 Video]]></title>
    <url>%2F2019%2F08%2F05%2F%E5%AE%81%E6%B3%A2%E8%A1%8C-%E5%85%A8%E7%A8%8B-Video%2F</url>
    <content type="text"><![CDATA[视频拍摄者：dream 宁波出差之旅已经结束，在宁波我们工作、生活、嗨皮。这是一段很难得的出差之旅，美好回忆尽在下方视频：]]></content>
      <categories>
        <category>智镜</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[宁波行Ⅱ - By Galaxy S9]]></title>
    <url>%2F2019%2F07%2F29%2F%E5%AE%81%E6%B3%A2%E8%A1%8C%E2%85%A1-By-Galaxy-S9%2F</url>
    <content type="text"><![CDATA[周日返程宁波正好有了时间拍照，赶住了宁波的傍晚一组样张——美到爆!]]></content>
      <categories>
        <category>智镜</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[macOS使用SSH key登录远程服务器]]></title>
    <url>%2F2019%2F07%2F24%2FmacOS%E4%BD%BF%E7%94%A8SSH%20key%E7%99%BB%E5%BD%95%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[macOS是基于UNIX内核开发的，所以在连接Linux服务器有很大的优势，并不像是在 Windows 环境上还得依赖客户端软件去发起远程连接。但是macOS一般情况开发者还是需要使用 \&lt;用户名&gt;@\&lt;IP地址&gt; 这样的形式来登录连接，如果密码设置的是强密码，很复杂的话经常会出现登录失败这样的情况，这会让人头大影响工作效率。为了提高效率减少这类情况的发生，使用SSH Key登录更安全，配置好之后，确保私钥的安全下，可以不设置密码，实现免密登录，也更方便。 如果电脑有配置过 Git 的SSH key的话接下来这一步可以省略直接看后面： 创建密钥 在创建密钥的时候，可以定义加密类型和长度，具体可以参考ssh-keygen命令帮助。创建的过程中，首先会提示要保存的位置和文件名，再提示要给密钥加个密码，也可以直接回车不要密码。公钥和私钥默认保存这用户目录的/.ssh/文件夹下。默认情况下，id_rsa为私钥，id_rsa.pub为公钥。 远程服务器ssh设置 此时还是需要用用户名和密码登录远程Linux服务器。使用vi编辑 /etc/ssh/sshd_config 文件，先打开PubkeyAuthentication和PermitRootLogin，一般只要把这几个参数前面的#（注释符）删掉即可. PubkeyAuthentication yes PermitRootLogin yes 重启ssh服务 systemctl restart sshd.service 上传公钥到远程服务器 在macOS端操作以下命令，把公钥上传到远程服务器，会提示输入远程的Linux服务器的密码: scp ~/.ssh/id_rsa.pub \&lt;用户名&gt;@\&lt;ip地址&gt;:/root/id_rsa.pub 在远程Linux服务器上，操作以下命令，把公钥追加到服务器ssh认证文件中: cat /root/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys 如果没有authorized_keys这个文件，请到.ssh文件夹下创建一个，并把权限设置为600: cat authorized_keys. chmod 600 authorized_keys. 追加好后，如果要禁止用户名密码登录，再编辑/etc/ssh/sshd_config文件，把PasswordAuthentication设置为no，重启SSH服务。 好了，SSH Key登录已经设置完毕，如果没有设置密钥密码，直接这终端输入ssh root@IP即可登录远程服务器。如果该用户下没有公钥，则会提示Permission denied。 至此，使用SSH key登录Linux的配置就完成了，以后再也不用担心密码输入错误了！！]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[宁波行 - By Galaxy S9]]></title>
    <url>%2F2019%2F07%2F23%2F%E5%AE%81%E6%B3%A2%E8%A1%8C%20-%20By%20Galaxy%20S9%2F</url>
    <content type="text"><![CDATA[因为工作原因，我和同事一共12人来到 浙江第二大城市——宁波 出差，感受一波浙江气息，沿途的风景很美！住的酒店位置也很棒，极佳的体验！爽歪歪！ 南京 ——&gt; 宁波沿途景色 酒店门口 宁波新规划的崭新区–饭店窗户看出去 一家装修很特色的宁波本地菜馆 宁波的一家进口商品超市 酒店窗户望出去 酒店外 宁波街道]]></content>
      <categories>
        <category>智镜</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[南航行 - By Nikon D7100]]></title>
    <url>%2F2019%2F07%2F21%2F%E5%8D%97%E8%88%AA%E8%A1%8C%20-%20By%20Nikon%20D7100%2F</url>
    <content type="text"><![CDATA[小智近日带着 Nikon D7100 走进南航体育场进行拍摄 漂亮的老大 野球场上的高手 南航主教学楼]]></content>
      <categories>
        <category>智镜</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Docker基本概念]]></title>
    <url>%2F2019%2F03%2F27%2FDocker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[镜像、容器、仓库是Docker三大核心概念。 1. 镜像 (image)镜像可以类比虚拟机的镜像，或者可以理解为是一款软件的安装包。例如：Redis镜像、Nginx镜像、Ubuntu镜像等。镜像是创建Docker的基础。开发者可以在网络上下载获取到已经设置完好的镜像来直接应用开发。 2. 容器 (Container) 容器类似于一个轻量级的沙箱，Docker利用容器来运行和隔离应用。容器是从镜像中创建出来的应用实例，类似于Java中的类和通过类实例化对象之间的关系。每个容器类似Java类实例出来的对象一样，各自有各自的操作周期等，是彼此相互隔离、互不可见的。 镜像本身是只读的，不可以对其操作修改。容器从镜像启动时，其实会在镜像的最上一层生成一个可读写层。 3. 仓库 (Repository)讲到仓库这个概念其实就很容易理解了，现在很多开发者代码版本工具都是使用 Git，Docker仓库的概念和 Git 思路大致相同，因为Docker在很多地方设计就是参见Git来进行构建开发的，这就让开发者们对Docker的使用更加得心应手、触类旁通。顾名思义，仓库就是用来放很多东西的地方，那么Docker仓库就是集中存放镜像文件的场所。每个Docker仓库中存放着一类Docker镜像的集合，它们之间通过 tag 来进行区分,例如：Ubuntu镜像仓库就存放着很多Ubuntu镜像，tag可能有14.04、16.04等等，这些tag可以理解为不同的版本镜像。目前最大的公开仓库莫过于Docker官方的 Docker Hub,这里用到最大的 公有 仓库，那是不是还有私有的，没错是的。当开发者们不愿意公开自己的镜像文件，Docker也是支持他们在本地网络创建私有仓库，这样就很好的解决了镜像仓库移植的问题，以后如果想在其他机器上使用时，直接从仓库pull即可，真正达到了云迁移的效果。 Docker常用操作命令1. docker version 可以参看安装docker服务端、客户端的版本信息2. docker ps 列出docker主机上当前正在运行的容器3. docker pull NAME[:TAG] 从仓库中拉取下载镜像4. docker images 列出本地主机已有的镜像基本信息5. docker tag [OLD-TAG] [NEW-TAG] 在旧tag指向的镜像建一个新的tag指向该镜像，ps：并不是对旧的tag重新命名，这个操作单单只是新建一个tag和旧的tag指向同一个容器，直白来讲就是对一个镜像取了两个名字。6. docker inspect [NAME] 列出镜像的详细信息docker inspect -f {{".[属性名]"}} 查看详情中单个信息的内容 7. docker search [NAME] 搜索远程仓库的镜像8. docker rmi NAME[:TAG] 删除镜像[当且仅当镜像对应的tag仅剩一个时，执行该命令才是删除镜像的操作]，一个镜像若是拥有多个tag时，执行该命令只是将对应的tag删除并非直接删除原镜像。9. docker rmi -f [NAME] 强制删除镜像 在删除Docker镜像时，合理的做法应该是先将镜像创建的容器都删除掉之后再来删除镜像 10. docker save 将镜像保存为本地文件11. docker load 将本地镜像文件导入到本地镜像库12. docker push NAME[:TAG] 将镜像上传至仓库]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CentOS环境下LibreOffice安装与配置]]></title>
    <url>%2F2019%2F03%2F21%2FCentOS%E7%8E%AF%E5%A2%83%E4%B8%8BLibreOffice%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[刚刚结束了公司内部项目的第一期开发，收获满满！项目作用是用于处理公司一些法律裁决文书的在线批注，涉及到了WORD、PDF、txt等常见文本格式转换为HTML文档的功能，以往Java可以通过POI的形式去对这些文档进行格式的转换，但是要达到友好、兼容性都要兼顾到的效果就需要利用强大的LibreOffice来作为中间处理层辅助我们进行更好的转换！ LibreOffice 安装 – （操作系统环境： CentOS 7.2）|（LibreOffice 6.2）首先，需要执行以下三行下载命令，将LibreOffice三个包下载到机器本地 wget http://mirrors.ustc.edu.cn/tdf/libreoffice/stable/6.2.0/rpm/x86_64/LibreOffice_6.2.0_Linux_x86-64_rpm.tar.gz wget http://mirrors.ustc.edu.cn/tdf/libreoffice/stable/6.2.0/rpm/x86_64/LibreOffice_6.2.0_Linux_x86-64_rpm_sdk.tar.gz wget http://mirrors.ustc.edu.cn/tdf/libreoffice/stable/6.2.0/rpm/x86_64/ 其次，在 /usr 目录下创建 LibreOffice 文件夹，将第一步下载的三个包解压到该文件目录下，解压完成后分别进入各自解压的目录下的 /RPMS 目录下安装rpm yum localinstall *.rpm 字体安装拷贝windows中的simsun.ttc到/usr/share/fonts/simsun/ cd /usr/share/fonts/simsun mkfontscale mkfontdir fc-cache -fv 执行以下命令让字体生效 source /etc/profile 至此，LibreOffice的安装已经完成 流程安装完毕，需要一个文件来测试一下LibreOffice能否正常工作假设，在服务器目录 /usr/local/ 目录下有一个 txt 文本文件： test.txt 执行命令 libreoffice6.2 –invisible –convert-to html /usr/local/test.txt]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mac环境下Redis安装与配置]]></title>
    <url>%2F2019%2F01%2F03%2FMac%E7%8E%AF%E5%A2%83%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[之前在工作中大量用到redis，近一年中的项目里很少再去操作redis，导致笔者已经忘记了redis的很多用法，用此篇博文特此来回忆巩固一下之前熟悉的redis 安装 – (操作系统环境：macOS 10.14.2)笔者使用Homebrew安装redis，默认安装redis最新稳定版，redis官网提供最新的版本和稳定版本，用户可以根据自己意愿进行下载，但是使用Homebrew安装的话，默认就会是最新的稳定版本。 执行命令—(执行该命令的前提是电脑已经安装好了homebrew，如果未安装请自行百度方法，这里不再赘述) brew install redis 安装完毕后,会在 /usr/local/etc 路径下有 redis.conf 文件，该文件就是redis的配置文件。为了方便开发者的使用，我们需要修改几个配置，如下： daemonize的默认配置是no，将其改为yes。这个配置项意思是Redis的守护模式是否开启。no：不开启，那这意味着redis要必须保持命令终端开启而不能后台启动，改为yes则代表开启守护模式，这样一来就可以后台启动redis不需要一直停留在终端启动窗口，提高开发使用效率。 port 是redis的端口属性，默认是6379，一般来说在开发环境下很少去改动这个默认的端口配置，如果需要修改则改成自己想设置的即可。 loglevel 是日志的级别，默认是notice。将其设置为debug，如此一来的设置对于开发者是很友好的，看到更多和开发相关的信息。 logfile 是redis日志文件的保存位置，默认是空的，需要自行添加一个日志保存路径，这里建议把保存redis日志文件创建在无需sudo命令就能够打开执行的位置，否则redis启动时加载日志时显示没有足够权限访问，那么就会启动失败，所以这里建议用户设置为不需要sudo权限就可以读写的位置中去，【建议在Users路径下创建目录来进行保存日志】。 关于redis配置的相关内容，开发者可以根据自身的需求来进行个性化的配置即可。 启动 执行命令—启动redis redis-server [配置文件所在的路径]/redis.conf (假如配置文件所在路径是: /usr/local/etc/),那么命令就是如此: redis-server /usr/local/etc/redis.conf 操作 执行命令—客户端操作 可以在终端窗口使用 redis-cli 来操作redis服务 关闭找到redis对应的pid服务 kill -9 Pid 杀死服务进程即可]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[小智常用工具类网址]]></title>
    <url>%2F2018%2F10%2F29%2F%E5%B0%8F%E6%99%BA%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%BD%91%E5%9D%80%2F</url>
    <content type="text"><![CDATA[Json在线解析网站 Json解析 在线cron表达式生成器-【用于spring-boot项目中的定时任务规则】 在线cron表达式生成器 MyBatis官方文档-简体中文版 MyBatis官方文档 Maven中心仓库 Maven中心仓库 markdown语法 markdown 爱情守望者-[精品Mac应用] 爱情守望者 IDEA主题 主题美化]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Homebrew日常更新与维护]]></title>
    <url>%2F2018%2F10%2F19%2FHomebrew%E6%97%A5%E5%B8%B8%E6%9B%B4%E6%96%B0%E4%B8%8E%E7%BB%B4%E6%8A%A4%2F</url>
    <content type="text"><![CDATA[本文作者：QuincySx,博客地址 更新 Homebrew brew update 安装软件 brew install #name 查看那些软件可更新 brew outdated 更新所有软件 brew upgrade 更新指定软件 brew upgrade #name 清理旧版本软件 brew cleanup 清理指定软件的旧版本 brew cleanup #name 查看可清理的软件 brew cleanup -n]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令速查表]]></title>
    <url>%2F2018%2F10%2F13%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[Git常用命令速查表]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[BootStrap-Table基础使用记录]]></title>
    <url>%2F2018%2F09%2F01%2FBootStrap-Table%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[最近闲来无事就在和同事做一个公司内部自动化热饭小程序，搭建后台管理需要查看热饭用户列表，既然是列表也势必用到表格分页。按照很早之前的分页方法就会很繁琐，暂且不说服务端sql写一堆，就是连前端也需要根据服务端回传的pageData进行处理分页的页码按钮进行判断和输出。好在这种方法已经被淘汰，来到了新的时间点，这些分页时所需要的数据也都有了完美的分页工具、插件，它们能够帮助开发者提高开发效率，事半功倍，可以让开发者们把时间更多集中在业务层而不是再想以前那样为了一个分页投入过多精力！笔者使用bootstratp-table进行分页，这是基于jQuery的一款分页表格框架，用法不是很难，官网有详细的API文档 bootstrap-table-API 。 首先在你需要表格的页面里输入一个表格标签，就像这样: 1&lt;table id=&quot;heatTable&quot;&gt;&lt;/table&gt; 你没有看错就是这么简短的一行，除id是需要，其他的都可以不需要，标记id才可以标记它是唯一的，切记id一定取名是唯一的，不可以有其他的html标签id和此同名，否则就会找不到。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889$(function () &#123; // table列表初始化 tableInit();&#125;);var $table;var $heatTableForm;//初始化bootstrap-table的内容function tableInit() &#123; $heatTableForm = $(&quot;.heat-table-form&quot;); var queryUrl = &apos;heatlist&apos;; $table = $(&apos;#heatTable&apos;).bootstrapTable(&#123; url: queryUrl, //请求后台的URL（*） method: &apos;GET&apos;, //请求方式（*） striped: false, //是否显示行间隔色 pagination: true, //是否显示分页（*） paginationLoop: false, smartDisplay: false, //分页页码按钮一直展示，若设置为true：当数据达到规定数量才会展示按钮 sortable: false, //是否启用排序 sidePagination: &quot;server&quot;, //分页方式：client客户端分页，server服务端分页（*） pageNumber: 1, //初始化加载第一页，默认第一页,并记录 pageSize: 10, //每页的记录行数（*） pageList: [10, 25], //可供选择的每页的行数（*） minimumCountColumns: 2, //最少允许的列数 contentType: &quot;application/x-www-form-urlencoded&quot;, clickToSelect: false, //是否启用点击选中行 uniqueId: &quot;ID&quot;, //每一行的唯一标识，一般为主键列 //得到查询的参数 queryParams: function (params) &#123; /* *这部分是表格查询的form表单，这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的 */ var temp = &#123; pageSize: params.limit, pageNum: params.offset / params.limit + 1, nickName: $heatTableForm.find(&quot;input[name=&apos;nickname&apos;]&quot;).val(), heatStatusValue: $heatTableForm.find(&quot;select[name=&apos;heat&apos;]&quot;).val(), zoneName: $heatTableForm.find(&quot;select[name=&apos;zone&apos;]&quot;).val() &#125;; return temp; &#125;, /* * 这部分看名字就可以知道了，这个部分就是你表格要展示的列名，切记field是必须要和你服务端回传的data的字段名一致。 */ columns: [ &#123; field: &apos;heatId&apos;, title: &apos;ID&apos; &#125;, &#123; field: &apos;nickName&apos;, title: &apos;昵称&apos; &#125;, &#123; field: &apos;startTime&apos;, title: &apos;热饭开始时间&apos; &#125;, &#123; field: &apos;endTime&apos;, title: &apos;热饭结束时间&apos; &#125;, &#123; field: &apos;heatStatusName&apos;, title: &apos;热饭状态&apos; &#125;, &#123; field: &apos;zoneName&apos;, title: &apos;所在区域&apos; &#125;], onLoadSuccess: function () &#123; &#125;, onLoadError: function () &#123; showTips(&quot;数据加载失败！&quot;); &#125;, &#125;);&#125;;/** 查询方法，当执行这个方法就会将表格查询的form传入queryParams中执行*/function search() &#123; $(&quot;#heatTable&quot;).bootstrapTable(&apos;refresh&apos;);&#125;/** 这里是笔者自己加入的一个重置查询方法，执行这个方法会将查询的form中的参数全部重置执行查询*/function reload() &#123; $heatTableForm.find(&quot;input[name=&apos;nickname&apos;]&quot;).val(&apos;&apos;); $heatTableForm.find(&quot;select[name=&apos;heat&apos;]&quot;).val(&apos;&apos;); $heatTableForm.find(&quot;select[name=&apos;zone&apos;]&quot;).val(&apos;西区&apos;); $(&quot;#heatTable&quot;).bootstrapTable(&apos;refresh&apos;);&#125;]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Spring-过滤器、监听器和拦截器]]></title>
    <url>%2F2018%2F08%2F24%2FSpring-%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%2F</url>
    <content type="text"><![CDATA[在开发Java Web项目时，经常会接触到过滤器、监听器和拦截器这些内容，很多朋友有时候会混淆这些概念也不是很清楚它们各自的作用和执行的流程，笔者曾经也是这样的，但是后来就通过扩展阅读得到了一篇很详细的执行链路图，如下： 过滤器(Filter)过滤器Filter，是Servlet的的一个实用技术了。可通过过滤器，对请求进行拦截，比如读取session判断用户是否登录、判断访问的请求URL是否有访问权限(黑白名单)等。主要还是可对请求进行预处理。 监听器(Listener)Listener是servlet规范中定义的一种特殊类。用于监听servletContext、HttpSession和servletRequest等域对象的创建和销毁事件。监听域对象的属性发生修改的事件。用于在事件发生前、发生后做一些必要的处理。一般是获取在线人数等业务需求。 拦截器(Interceptor)在开发中处理利用以上的进行过滤web请求时，还可以使用Spring提供的拦截器(HandlerInterceptor)进行更加精细的控制 文章内容源自：oKong | 趔趄的猿]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一个小小细节引发的Bug]]></title>
    <url>%2F2018%2F08%2F21%2F%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B0%8F%E7%BB%86%E8%8A%82%E5%BC%95%E5%8F%91%E7%9A%84Bug%2F</url>
    <content type="text"><![CDATA[在工作时候，有一个功能是要获取当前时间作为该记录的创建时间插入DB，以往的时候是直接以DateTime或者直接就是以String类型插入DB的，这次是TimeStamp时间戳[有一些大神觉得时间戳是对的啊，没问题，长度够长，精度够准！其实不然，并不是长度长、位数多它就够精准！！]。笔者后台接收前端参数是一个大对象之中还套着对象，换句话来说就是子父级的关系，笔者需要外层对象插入DB后获取到外层对象DB内的ID作为内层对象的关联ID再进行插入，笔者获取关联ID是通过外层对象(假设这是一个用户表，传入的查询条件就是userName+createTime，这两个参数是前端传入的也就是已知确定)的已知字段进行查询获取ID，那么问题就是来了！！问题的现象是：有时候根据查询条件时可以查到的，但有时候就会查询不到，经过LOGGER的打印得出结论，有时候时间戳的秒数(createTime)有时候会比原本接收的多一秒，这样关联当然查询不到，笔者此时瞬间就想到了四舍五入！经过一番查询，果不其然！当TimeStamp的毫秒值 &gt; 500时，则会自动进一秒。[到此时，还认为它是精确的吗！也许吧！] 对比两段代码，上面代码则会出现四舍五入的情况，下面的代码则不会： String UUID = java.util.UUID.randomUUID().toString(); long time = System.currentTimeMillis() + 30 * 60 * 1000; Timestamp outDate = new Timestamp(time); long outDateLong = time/1000*1000; user.setValidateUuid(UUID); user.setOutDate(outDate); userMapper.updateByPrimaryKey(user); String UUID = java.util.UUID.randomUUID().toString(); long time = System.currentTimeMillis() + 30 * 60 * 1000; long outDateLong = time/1000*1000; Timestamp outDate = new Timestamp(outDateLong); user.setValidateUuid(UUID); user.setOutDate(outDate); userMapper.updateByPrimaryKey(user);]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[深入理解Serverless架构-[干货搬运]]]></title>
    <url>%2F2018%2F08%2F17%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Serverless%E6%9E%B6%E6%9E%84%2F</url>
    <content type="text"><![CDATA[本文作者：UCloud技术市场团队 随着2014年AWS Lambda的发布和流行，近年来有关Serverless的话题和讨论越来越频繁。究竟什么是Serverless？为什么需要Serverless? Serverless是否意味着从此不再需要服务器了？Serverless究竟能为开发运维带来哪些便利呢？回溯本源让我们先来回顾一下常见的应用服务开发上线流程。 一、直接使用物理设备开发者将应用程序开发测试完毕后，直接将程序和相关软件部署在物理设备上。服务器直接使用物理机。这种方式将不可避免地需要大量人工运维和重复劳动。比方说，用户数量逐渐增长时，我们需要扩容物理设备以应对更高的网站访问压力。这时候我们需要购置更多的物理服务器，并且搬运到机房的对应机架机柜中。然后，我们需要手动为新购置的物理服务器安装各种运行软件，填写好配置文件，手动部署启动好需要运行的应用程序。这些大量的重复运维劳动造成产品上线慢，迭代周期长。其次，使用物理设备直接部署应用程序将导致资源浪费。如今的物理服务器的配置越来越强大，64核128G在今天看来也不过是普通配置。很难想象你买了一台32核的物理机，却只想搭建个人博客。此外，电商行业经常为了应对促销秒杀等活动准备大量的物理资源，然而在非促销等流量低谷时段，大量物理资源处理闲置状态，不利于节约成本。 最后，为了解决资源浪费的问题，我们很容易想到，可以将多个应用程序部署在同一台服务器上来充分利用资源。但由此又导致了新的麻烦，不同的应用程序经常会抢占CPU，磁盘IO，内存，难以做到隔离资源，各行其是，互不干扰。 二、IaaS托管硬件虚拟化技术的成熟直接解决了上述直接使用物理设备的几个痛点。 首先，使用IaaS平台，服务器由物理机变成了虚拟机。申请服务器资源仅需要调用IaaS平台的API或者点击控制台页面就可以轻松完成。CPU个数，内存大小，网络带宽，存储磁盘大小都可以按需指定，随心所欲。虚拟机被玩坏了也不需要重装系统修复，删除重建新虚拟机即可。扩容服务器不再需要大量的重复人工运维劳动，加速了产品上线和迭代。 其次，使用IaaS平台一定程度上减轻了资源浪费。在IaaS平台上很容易申请和删除虚拟机，升降带宽配置等操作，这样当业务低谷时段直接删除多余的虚拟机，降低带宽购买配额，就能节约不少成本。 最后，IaaS平台解决了资源隔离的问题。不同虚拟机之间有独立CPU，内存，磁盘，网卡，不同虚拟机之间的程序不会进行资源抢占。 然而，IaaS平台仅仅为开发者做好了硬件托管的工作。开发者依然需要为虚拟机安装操作系统和各种软件，填写配置并部署应用；依然需要关注服务器，带宽，存储等资源的使用量和扩容缩容。此外，IaaS平台没有完全解决资源浪费的问题，实际上，大量虚拟机在日常运行中依然存在超低负载运行的情况。 三、 PaaS托管应用使用PaaS平台，开发者无需关注服务器的申请采购、系统安装和资源容量。PaaS服务提供商为开发者提供好了操作系统和开发环境以及支持的SDK和API，还能自动调整资源来帮助应用服务更好的应对突发流量。有了PaaS平台，开发者仅仅需要把应用开发好，然后在PaaS平台完成服务部署，应用服务即可上线。 相比IaaS平台，PaaS平台能更加精准地为应用程序所消耗的资源计费。IaaS平台仅仅依据用户申请的资源量，如CPU核心数，网络带宽来计费，而不关注用户是否实际真正充分使用到了其所申请到的资源。PaaS平台则可以通过统计应用程序所占用的CPU使用率和内存使用率来做的更精准的计费，甚至可以实现应用层面的计费，比如服务响应时间，或者应用所消耗的事务。 什么是Serverless？ Serverless指的是由开发者实现的服务端逻辑运行在无状态的计算容器中，它由事件触发， 完全被第三方管理，其业务层面的状态则被开发者使用的数据库和存储资源所记录。 以上图为例，图中上半部分描述的是互联网应用传统架构的模型：用户客户端APP与部署在服务器端的常驻进程通信，服务端进程处理该应用的大部分业务逻辑流程。下半部分则描述了Serverless架构模型。与传统架构模型最大的不同在于，互联网应用的大部分业务逻辑流程被转移到客户端上，客户端通过调用第三方服务接口来完成诸如登录、鉴权、读取数据库等通用业务场景；高度定制化的业务逻辑则通过调用第三方FaaS平台执行自定义代码来完成。总体上看，Serverless架构将传统架构中的服务器端的整串后台流程拆分成在客户端上执行一个个第三方服务调用或FaaS调用。 回顾之前所述，无论是直接使用物理服务器设备部署程序，还是基于IaaS平台托管硬件，或者使用PaaS平台托管应用，开发部署互联网应用都离不开传统的客户端-服务器模式，即客户端向服务端发送请求，服务器运行处理各种业务逻辑，并响应来自客户端的请求。至于物理机，IaaS乃至PaaS，归根结底只是服务器程序的部署模式不同。 而在Serverless架构中，软件开发者和运维工程师们不在需要关心服务器的部署、架设、伸缩，这些问题交给云平台商来解决，程序员们得以将精力投入用代码来实现业务逻辑中，而不是管理服务器。Serverless并不意味着不再需要服务器了，只是服务器资源的申请、使用、调度、伸缩由云服务商自动实现，应用开发者无需关心。 Serverless如何工作？以一个简单需求为例，论坛网站需要对用户上传的图片生成一个缩略图。我们使用UCloud的通用计算(UGC)来实现该功能。 如上图所示，使用UGC实现这一功能操作步骤如下：1.用户将缩略图算法代码打包推送到UGC算法仓库中；2.用户从UFile中读取原始图片作为输入数据，调用UGC SubmitTask API，指定缩略图算法；3.UGC平台执行缩略图转换算法，将转换后的缩略图返回给用户；4.用户将得到的结果缩略图存储到UFile中。 整个过程中，开发者仅仅需要将缩略图算法实现函数代码镜像提交到UGC算法仓库中，然后调用UGC的提交任务API，输入源图片数据，即可获得计算结果。 从以上过程可以总结出：使用Serverless，开发者无需考虑服务器细节，只需要负责编写发生某些事件后所需执行的代码。云供应商将负责提供用于运行这些代码的服务器，并在必要时对服务器进行缩放。执行完毕后，承担这些功能的容器会立刻停用，用户只需为运行代码过程中所消耗的资源付费。这种模式也被称为做函数即服务（Function-as-a-Service，FaaS）。 与非Serverless方案的对比上述场景如果使用非Serverless方案，大体架构如下： 该方案需要维护一组UHost服务集群，服务器中部署图片缩略转换程序。UHost的服务程序先从UFile中读取源图片，使用图形库将其转换成缩略图并再存回UFile中。相比之前的Serverless方案，有以下几点对比： 开发者需要关心服务器端程序开发设计，将图片处理程序部署成服务端程序，并购置服务器部署并运维管理这批UHost服务器。而使用UGC，开发者无需关注服务器端，只需要将图形库函数提交到UGC算法仓库中并调用UGC API完成计算任务即可。 UHost集群无法自动为突发流量自动伸缩扩容，需要运维工程师手动购置更多的UHost并部署上线扩容。而UGC能根据突发的流量自动伸缩，运行更多的函数容器。 UHost服务器只要在运行就必须为之付费，无论请求量和负载的高低。UGC只需要为实际的调用次数和函数实际执行时间付费，真正实现了按需分配付费。 Serverless相比PaaS的特点相比PaaS，Serverless在以下几个方面更具优势： 开发者无需关注服务器程序设计，部署和运维管理，开代码重心从此转移到调用方而非服务器端。 更精细粒度的计费模式，真正实现了按需付费(Pay as you go)。使用PaaS托管应用，只要将应用部署上去，无论访问量或者负载高低，都需要计费。而使用Serverless，用户仅仅需要为函数真正调用到的次数和执行时间付费。 使用Serverless前，你需要了解的Serverless的适用场景特点Serverless平台运行的是代码函数的片段，而不是整个程序。例如生成缩略图场景中，UGC仅仅运行的是用图形库处理图片这段代码。 代码必须做彻底的无状态改造。Serverless平台会自动为突发的流量自动扩展运行函数代码所需要的容器，但用户代码中无法得知其容器的部署环境情况。两次不同的Serverless调用必须是非耦合无关联的。 用户无需关注水平扩展，Serverless平台会自动根据调用量扩展运行代码所需要的容器，轻松做到高并发调用。 仅仅需要上传代码文件或者代码容器镜像即可完成应用部署。 代码运行的生命周期非常短暂。通常Serverless服务商，会限制代码的最大运行时间，例如AWS Lambda为5分钟。 每次Serverless调用，Serverless平台都会启动容器来运行对应代码，调用结束后将容器销毁。因为容器创建存在一定开销，所以Serverless不太适合对延迟要求及其苛刻的场景。 不是银弹Serveless架构在某些场景下拥有明显的优势，但它不是解决一切架构问题的灵丹妙药，更不是传统架构的革命者和替代者。架构上说，Serverless更像是一种粘合剂。以下是一些常见的不适用Serverless的情况。 Serverless平台需要为每次FaaS调用创建一个容器运行对应代码。前面提到过，由于创建容器并初始化代码运行环境存在一定程度的开销和延时（通常在10ms级），Serverless架构难以胜任对延迟要求非常苛刻的场景。 同样的，由于启动容器进程开销较高，Serverless架构难以应对非常高的并发请求场景。通常云服务商会对用户的并发调用数做限制，比如AWS Lambda是1000。 通常FaaS平台会对代码运行时间做最大时间限制。如果你的代码需要运行较长时间才能返回结果，需要慎重考虑使用Serverless。例如刚才提到的，AWS Lambda对代码最大运行时间限制为5分钟。 由于代码容器在Serverless平台部署位置环境的不确定性，使用Serverless时，我们必须对代码做无状态改造。如果你两次调用存在关联偶合，同样请慎重考虑Serverless。 其他主流公有云服务商Serverless产品除了众所周知的AWS Lambda，目前常见的Serverless产品还有前文提到的UCloud的通用计算 (UGC)，官网：https://www.ucloud.cn/site/product/ugc.html。 UCloud通用计算UGC具备以下特性： 1.用户无需关心计算资源的的交付部署，以用户算法代码为中心；计算资源服务化，用户通过API使用计算资源；2.按需付费(Pay As You Go)。用户仅需要为实际消耗的计算资源付费；3.提供十万核级的海量计算资源，轻松支持高并发计算任务请求，自动实现资源分配和扩展；4.具备高可用和跨可用区自动容灾能力。 作为UCloud研发的分布式大规模并行计算服务，UGC能够充分利用UCloud多个区域内的多个可用区的计算资源，提供基于UCloud云平台的高可用性和高并发性，同时满足图片处理、机器学习、大数据处理、生物数据分析等领域的计算需求。 本文转载自UCLOUD，原文链接：深入理解Serverless架构]]></content>
      <categories>
        <category>技术杂谈</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mac环境下使用Nginx实现80端口转发8080端口]]></title>
    <url>%2F2018%2F08%2F10%2FMac%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8Nginx%E5%AE%9E%E7%8E%B080%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%918080%E7%AB%AF%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[由于项目本身的原因，开发必须使用80端口实现，而在Unix内核中非Root用户无法直接使用1024以下的端口，最初作者找到了pfctl的方式实现80端口转发到8080端口实现访问，经过亲测出现了最为严重的问题，按照当时的方法配置好之后发现本机Mac通过localhost/&lt;项目名&gt;和127.0.0.1/&lt;项目名&gt;可以访问，此时很是兴奋，但出现了最根本的问题，那就是同局域网内其他机器通过访问IP地址/&lt;项目名&gt;（例如：IP地址是192.168.0.106，那么其他机器访问192.168.0.106/&lt;项目名&gt;）却访问不到，本来就是为了实现同网段开发和测试并行，结果其他机器却无法访问意味着这一次的搬砖是竹篮打水。后来作者就利用Nginx进行80端口转发到Tomcat的8080端口实现访问，作者亲测果然好使，好了废话不多说了，干货走起来~~下面就是详细的配置步骤： ##环境Mac OS版本： 10.12.6Nginx版本： 1.12.1 安装作者使用Homebrew安装库 brew search nginxbrew install nginx 这样安装好之后你会发现nginx的监听端口是8080，并非80，那么此时你就需要更改Nginx的监听端口，那么这一步就很关键了，不能按照以往传统的方式去更改,读者请仔细看一下部分。由于Mac OS是自带Apache服务的，它本身占用了80端口，首先你需要将Apache的监听端口改为其他或者直接将其卸载，作者是改掉它的监听端口为8011。 命令行sudo vim /etc/apache2/httpd.conf图片中红色框打开原本是80端口，作者已将其改为8011。 改动之后，将其重启 sudo /usr/sbin/apachectl restart到这里，你已经将80端口释放掉了。 其次你需要了解的就是plist文件。plist就是property list format的意思，是苹果用来保存应用数据的格式，其实就是个xml。可以在/usr/local/opt/nginx 下找到nginx对应的plist文件，比如在作者电脑上是 homebrew.mxcl.nginx.plist 。它的内容如下： &lt;?xml version=”1.0” encoding=”UTF-8”?&gt; &lt;!DOCTYPE plist PUBLIC “-//Apple//DTD PLIST 1.0//EN” “http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt; &lt;plist version=”1.0”&gt; &lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;homebrew.mxcl.nginx&lt;/string&gt; &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt; &lt;key&gt;KeepAlive&lt;/key&gt; &lt;false/&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;/usr/local/opt/nginx/bin/nginx&lt;/string&gt; &lt;string&gt;-g&lt;/string&gt; &lt;string&gt;daemon off;&lt;/string&gt; &lt;/array&gt; &lt;key&gt;WorkingDirectory&lt;/key&gt; &lt;string&gt;/usr/local&lt;/string&gt; &lt;/dict&gt; &lt;/plist&gt; 需要把这个文件复制到 /Library/LaunchDaemons 下，如果是 ~/Library/LaunchAgents 也可以，但两者有区别。前者是系统启动时启动，后者则是在用户登录时启动。 接着执行launchctl load -w，如下： sudo cp /usr/local/opt/nginx/*.plist /Library/LaunchDaemonssudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist 最后，重启你的机器，你会发现nginx在80端口启动了，试着通过http://localhost直接访问，若出现下边图片的显示则意味着你的Nginx的80端口已经配置完成，意味着你已经完成了六成的工作。 如果你Tomcat的端口是8080，此时你便要启动它，之所以在此时启动Tomcat是为了先让Tomcat占用8080端口，因为在后面配置Nginx转发时需要配置8080端口的转发，为了在那个时候不被Nginx抢先占用8080端口(这里也可以不启动Tomcat，只要你在配置好nginx转发配置后不要立刻启动nginx服务即可，因为启动它便直接占用8080端口实现转发，而这时其实你还未使用8080端口)导致Tomcat的启动的失败，因此可以先让Tomcat占用端口而后在进行Nginx对8080端口的映射转发。此时你的Tomcat已经启动好了，此时我们开始配置Nginx的转发配置： 命令行sudo vim /usr/local/etc/nginx/nginx.conf你只需关心server节点内的配置即可 server下的结点： listen：监听80端口server_name：转发到哪个地址proxy_pass：代理到哪个地址 这其中几项配置完毕，我们将Nginx重启（重启是需要切换到Nginx目录下的） sudo /usr/local/Cellar/nginx/1.12.1/bin/nginx -s reload 到这里所有的操作都已完毕，现在你和你同一网段下的其他伙伴就可以通过直接访问IP地址/&lt;项目名&gt; 访问你的Tomcat项目了。 相关命令操作Apache命令停止服务：sudo /usr/sbin/apachectl stop开启服务：sudo /usr/sbin/apachectl start重启服务：sudo /usr/sbin/apachectl restart Nginx命令(需要在Nginx的目录下执行，目录:/usr/local/Cellar/nginx/1.12.1/bin/)开启：sudo nginx重启：sudo nginx -s reload关闭首先 ，查询nginx主进程号(带有master标识的进程)：ps -ef|grep nginx正常停止 sudo kill -QUIT 主进程号快速停止 sudo kill -TERM 主进程号 感谢以下博客的博主http://www.cnblogs.com/kavlez/p/start-nginx-on-port-80-at-os-x.htmlhttp://blog.csdn.net/seafishyls/article/details/44546809http://www.cnblogs.com/94cool/p/3927084.html]]></content>
      <categories>
        <category>搬砖的艰辛之路...</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[欢迎各位]]></title>
    <url>%2F2018%2F08%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to FHZ‘s Blog!这里是小智的搬砖库存，当然还会有一些我个人拍摄的作品，欢迎各位在很无聊的时候闲逛~~]]></content>
      <categories>
        <category>欢迎各位</category>
      </categories>
  </entry>
</search>
